"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var object_fromentries_1 = __importDefault(require("object.fromentries"));
var clamp = function (min, max, val) { return Math.min(Math.max(min, val), max); };
var round = function (val, dp) { return parseFloat(val.toFixed(dp)); };
// Use Object.fromEntries when available
var filter = function (object, fn) { return object_fromentries_1.default(Object.entries(object).filter(function (_a) {
    var key = _a[0], val = _a[1];
    return fn(key, val);
})); };
var Scrubber = /** @class */ (function (_super) {
    __extends(Scrubber, _super);
    function Scrubber() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.barRef = react_1.createRef();
        _this.state = {
            seeking: false,
            mouseX: null,
            mouseY: null,
            touchId: null,
            touchX: null,
            touchY: null,
            hover: false,
        };
        _this.getPositionFromMouseX = function () {
            var barDomNode = _this.barRef.current;
            if (!barDomNode) {
                return 0;
            }
            var _a = _this.props, min = _a.min, max = _a.max;
            var _b = _this.state, mouseX = _b.mouseX, touchX = _b.touchX;
            var _c = barDomNode.getBoundingClientRect(), left = _c.left, width = _c.width;
            var cursor = typeof touchX === 'number' ? touchX : mouseX || 0;
            var clamped = clamp(left, left + width, cursor);
            var decimal = round((clamped - left) / width, 7);
            return round((max - min) * decimal, 7) + min;
        };
        _this.getPositionFromMouseY = function () {
            var barDomNode = _this.barRef.current;
            if (!barDomNode) {
                return 0;
            }
            var _a = _this.props, min = _a.min, max = _a.max;
            var _b = _this.state, mouseY = _b.mouseY, touchY = _b.touchY;
            var _c = barDomNode.getBoundingClientRect(), bottom = _c.bottom, height = _c.height;
            var cursor = typeof touchY === 'number' ? touchY : mouseY || 0;
            var clamped = clamp(bottom - height, bottom, cursor);
            var decimal = round((bottom - clamped) / height, 7);
            return round((max - min) * decimal, 7) + min;
        };
        _this.getPositionFromCursor = function () {
            var vertical = _this.props.vertical;
            return vertical ? _this.getPositionFromMouseY() : _this.getPositionFromMouseX();
        };
        _this.handleMouseMove = function (e) {
            _this.setState({ mouseX: e.pageX, mouseY: e.pageY }, function () {
                if (_this.state.seeking && _this.props.onScrubChange) {
                    _this.props.onScrubChange(_this.getPositionFromCursor());
                }
            });
        };
        _this.handleTouchMove = function (e) {
            if (_this.state.seeking) {
                e.preventDefault();
            }
            var touch = Array.from(e.changedTouches).find(function (t) { return t.identifier === _this.state.touchId; });
            if (touch) {
                _this.setState({ touchX: touch.pageX, touchY: touch.pageY }, function () {
                    if (_this.state.seeking && _this.props.onScrubChange) {
                        _this.props.onScrubChange(_this.getPositionFromCursor());
                    }
                });
            }
        };
        _this.handleSeekStart = function (e) {
            _this.setState({ seeking: true, mouseX: e.pageX, mouseY: e.pageY }, function () {
                if (_this.props.onScrubStart) {
                    _this.props.onScrubStart(_this.getPositionFromCursor());
                }
            });
        };
        _this.handleTouchStart = function (e) {
            var touch = e.changedTouches[0];
            _this.setState({ hover: true, seeking: true, touchId: touch.identifier, touchX: touch.pageX, touchY: touch.pageY }, function () {
                if (_this.props.onScrubStart) {
                    _this.props.onScrubStart(_this.getPositionFromCursor());
                }
            });
        };
        _this.handleSeekEnd = function () {
            if (_this.state.seeking) {
                if (_this.props.onScrubEnd) {
                    _this.props.onScrubEnd(_this.getPositionFromCursor());
                }
                _this.setState({ seeking: false, mouseX: null, mouseY: null });
            }
        };
        _this.handleTouchEnd = function (e) {
            var touch = Array.from(e.changedTouches).find(function (t) { return t.identifier === _this.state.touchId; });
            if (touch && _this.state.seeking) {
                if (_this.props.onScrubEnd) {
                    _this.props.onScrubEnd(_this.getPositionFromCursor());
                }
                _this.setState({ hover: false, seeking: false, touchX: null, touchY: null, touchId: null });
            }
        };
        _this.renderMarkers = function () {
            var _a = _this.props, vertical = _a.vertical, markers = _a.markers;
            if (markers) {
                return markers.map(function (value, index) {
                    var _a;
                    var valuePercent = _this.getValuePercent(value);
                    return react_1.default.createElement("div", { key: index, className: "bar__marker", style: (_a = {}, _a[vertical ? 'bottom' : 'left'] = valuePercent + "%", _a) });
                });
            }
            return null;
        };
        _this.getValuePercent = function (value) {
            var _a = _this.props, min = _a.min, max = _a.max;
            return (((clamp(min, max, value) - min) / (max - min)) * 100).toFixed(5);
        };
        return _this;
    }
    Scrubber.prototype.componentDidMount = function () {
        window.addEventListener('mousemove', this.handleMouseMove);
        window.addEventListener('mouseup', this.handleSeekEnd);
        window.addEventListener('touchmove', this.handleTouchMove);
        window.addEventListener('touchend', this.handleTouchEnd);
    };
    Scrubber.prototype.componentWillUnmount = function () {
        window.removeEventListener('mousemove', this.handleMouseMove);
        window.removeEventListener('mouseup', this.handleSeekEnd);
        window.removeEventListener('touchmove', this.handleTouchMove);
        window.removeEventListener('touchend', this.handleTouchEnd);
    };
    Scrubber.prototype.render = function () {
        var _a, _b, _c;
        var _this = this;
        var _d = this.props, className = _d.className, value = _d.value, _e = _d.bufferPosition, bufferPosition = _e === void 0 ? 0 : _e, vertical = _d.vertical;
        var valuePercent = this.getValuePercent(value);
        var bufferPercent = this.getValuePercent(bufferPosition);
        var classes = ['scrubber', vertical ? 'vertical' : 'horizontal'];
        if (this.state.hover)
            classes.push('hover');
        if (this.state.seeking)
            classes.push('seeking');
        if (className)
            classes.push(className);
        var propsKeys = [
            'className',
            'value',
            'min',
            'max',
            'bufferPosition',
            'vertical',
            'onScrubStart',
            'onScrubEnd',
            'onScrubChange',
        ];
        var customProps = filter(this.props, function (key) { return !propsKeys.includes(key); });
        return (react_1.default.createElement("div", __assign({ onMouseDown: this.handleSeekStart, onTouchStart: this.handleTouchStart, onTouchEnd: function (e) { return e.preventDefault(); }, onMouseOver: function () { return _this.setState({ hover: true }); }, onMouseLeave: function () { return _this.setState({ hover: false }); } }, customProps, { className: classes.join(' ') }),
            react_1.default.createElement("div", { className: "bar", ref: this.barRef },
                react_1.default.createElement("div", { className: "bar__buffer", style: (_a = {}, _a[vertical ? 'height' : 'width'] = bufferPercent + "%", _a) }),
                this.renderMarkers(),
                react_1.default.createElement("div", { className: "bar__progress", style: (_b = {}, _b[vertical ? 'height' : 'width'] = valuePercent + "%", _b) }),
                react_1.default.createElement("div", { className: "bar__thumb", style: (_c = {}, _c[vertical ? 'bottom' : 'left'] = valuePercent + "%", _c) }))));
    };
    return Scrubber;
}(react_1.Component));
exports.Scrubber = Scrubber;
;
//# sourceMappingURL=index.js.map